/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package declaracionanual_impuestos;

import static declaracionanual_impuestos.DeclaracionAnual_ImpuestosPlus.df;
import static declaracionanual_impuestos.DeclaracionAnual_ImpuestosPlus.earnsDividends;
import static declaracionanual_impuestos.DeclaracionAnual_ImpuestosPlus.escribir;
import static declaracionanual_impuestos.DeclaracionAnual_ImpuestosPlus.facturas;
import static declaracionanual_impuestos.DeclaracionAnual_ImpuestosPlus.leer;
import static declaracionanual_impuestos.DeclaracionAnual_ImpuestosPlus.showTaxTable;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;

/**
 *
 * @author SALAI
 */
public class VentanaDeclaracion extends javax.swing.JFrame {

    /**
     * Creates new form VentanaDeclaracion
     */
    //Crear variables y arreglos estaticos
    static String[] categoria = {"Vivienda", "Educacion", "Alimentacion", "Vestimenta", "Salud", "Turismo"};
    static double iess;
    static double maxDeductRate = 0.18;
    static boolean earnsDividends;
    static boolean showTaxTable;

    static double totalIngresos = 0;
    static double totalDeducciones = 0;
    static double impBasico, impExcedente, impExcedentePagar, impTotal;
    static int año = 2023;
    static double[][] facturas = new double[12][6];
    static double[] sueldos = new double[12];

    static BufferedReader leer;

    static BufferedWriter escribir;
    static DecimalFormat df;

    static {
        try {
            //leer = new BufferedReader(new FileReader("Tablas Impositivas 2023.csv"));
            escribir = new BufferedWriter(new FileWriter("Declaracion-Impuesto del usuario.csv"));
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US);
            df = new DecimalFormat("#.##", symbols);
        } catch (IOException e) {
            e.getMessage();
        }
    }

    public VentanaDeclaracion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTitle = new javax.swing.JLabel();
        textField1 = new java.awt.TextField();
        nameLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaFactura = new javax.swing.JTextArea();
        scrollPane1 = new java.awt.ScrollPane();
        buttonTaxTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);

        labelTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        labelTitle.setText("Declaracion del impuesto a la renta");

        nameLabel.setText("Ingresa tu nombre");

        jButton1.setText("Generar sueldos y facturas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textAreaFactura.setColumns(20);
        textAreaFactura.setRows(5);
        jScrollPane1.setViewportView(textAreaFactura);

        scrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        buttonTaxTable.setText("Mostrar tabla de impuestos");
        buttonTaxTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTaxTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(284, 284, 284)
                        .addComponent(labelTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 888, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(nameLabel)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(477, 477, 477)
                        .addComponent(buttonTaxTable)
                        .addGap(93, 93, 93)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(labelTitle)
                .addGap(1, 1, 1)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(buttonTaxTable))
                .addGap(46, 46, 46)
                .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(274, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String reporte = "";
        try {
            try (BufferedReader leer2 = new BufferedReader(new FileReader("Declaracion-Impuesto del usuario.csv"))) {
                List<String[]> linea = new ArrayList<>();
                String line;
                while ((line = leer2.readLine()) != null) {
                    reporte += line + "\n";
                    linea.add(reporte.split(";"));
                }

                for (String[] row : linea) {
                    for (String cell : row) {
                        System.out.printf("%s\t", cell);
                        
                    }
                    System.out.println();
                }
                leer2.close();
            }

            System.out.println(reporte);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VentanaDeclaracion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(VentanaDeclaracion.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      
        textAreaFactura.setText(reporte);
        scrollPane1.add(textAreaFactura);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void buttonTaxTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTaxTableActionPerformed
     
        textAreaFactura.setText(getTaxTable(año));
        scrollPane1.add(textAreaFactura);


    }//GEN-LAST:event_buttonTaxTableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaDeclaracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaDeclaracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaDeclaracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaDeclaracion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaDeclaracion().setVisible(true);
              
            }
        });

        Scanner scanner = new Scanner(System.in, "UTF-8");

        //File f = new File("Tablas Impositivas 2023.csv");
        System.out.println("Ingresa tu nombre: ");
        String nombre = scanner.nextLine();
        totalIngresos = ingresarSueldos(sueldos);
        totalDeducciones = ingresarFacturas(facturas, categoria, maxDeductRate);

        //Test-line: totalDeducciones = 5352.97;
        if (totalIngresos < 0 || totalDeducciones < 0) {
            System.out.println("Los ingresos y las deducciones no pueden ser negativos.");
            return;
        }
        double baseImponible = totalIngresos - totalDeducciones;
        double refund = 0;
        if (baseImponible < 0) {
            refund = Math.abs(baseImponible);
        }

        System.out.println("Obtiene usted ingresos por pertenecer a alguna sociedad o corporacion que le distribuye dividendos o utilidades? (true o false)");
        earnsDividends = scanner.nextBoolean();
        scanner.nextLine(); //Limpiar Scanner para leer Strings en el metodo debajo
        double retornoImpuestos = 0;
        if (earnsDividends) {
            System.out.println("Cuanto $ en dividendos usted recibe anualmente");
            double dividends = Double.parseDouble(scanner.nextLine());
            System.out.println("Cual es la base impositiva ( en %) que paga su sociedad por distribuir cada dividendo?");
            double dividendsTaxRate = Double.parseDouble(scanner.nextLine());
            retornoImpuestos = dividends * (dividendsTaxRate * 0.01);
        }

        calcularImpuesto(baseImponible);
        generarDeclaracion(nombre, totalIngresos, totalDeducciones, baseImponible, impExcedentePagar, impExcedente, impBasico, impTotal, iess, retornoImpuestos, refund);
        System.out.println("Desea obtener y guardar su reporte de la declaracion actual");
        boolean decision = scanner.nextBoolean();
        if (decision) {
            guardarReporte(nombre, totalIngresos, totalDeducciones, baseImponible, impExcedentePagar, impExcedente, impBasico, impTotal, iess, retornoImpuestos, refund);
        }
        System.out.println("Desea conocer la tabla de Impuesto a la Renta para Personas Naturales (2023)? (true o false)");
        showTaxTable = scanner.nextBoolean();
        if (showTaxTable) {
            getTaxTable(año);
        }
        System.out.println("");
        System.out.println("GRACIAS POR USAR NUESTRO SISTEMA :3");
    }

    public static double ingresarSueldos(double sueldos[]) {
        // Java lee los enteros de un .csv sin problemas
        try {
            Scanner income = new Scanner(new File("MonthlyIncome.csv"));
            for (int mes = 0; mes < 12; mes++) {
                System.out.println("Ingrese su sueldo del mes " + (mes + 1) + ": ");
                sueldos[mes] = income.nextDouble();
                totalIngresos += sueldos[mes];
                System.out.println("El sueldo de este mes es de: " + sueldos[mes]);
            }
            iess = totalIngresos * 0.1145;
            totalIngresos -= iess;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DeclaracionAnual_ImpuestosPlus.class.getName()).log(Level.SEVERE, null, ex);
        }

        return totalIngresos;
    }

    public static double ingresarFacturas(double[][] factura, String[] categoria, double maxDeductRate) {
        //Java al leer doubles de un .csv los interpreta primero como Strings, por ello debemos convertirlos
        double[][] linea = new double[12][6];

        try {
            String line;
            int row = 0;
            BufferedReader receipts = new BufferedReader(new FileReader("Facturas.csv"));
            while ((line = receipts.readLine()) != null && row < 12) {
                String[] stringValues = line.split(",");  // Assuming your values are separated by tabs
                for (int col = 0; col < stringValues.length && col < 6; col++) {
                    linea[row][col] = Double.parseDouble(stringValues[col]);
                }
                row++;
            }
            /* Printing values (just for verification)
        for (double[] rowValues : linea) {
            for (double cell : rowValues) {
                System.out.printf("%f\t", cell);
            }
            System.out.println();
        }*/

            receipts.close();

            for (int mes = 0; mes < 12; mes++) {
                for (int cat = 0; cat < 6; cat++) {
                    System.out.println("Ingrese el total en costo de facturas de " + categoria[cat] + " del mes " + (mes + 1) + ": ");
                    facturas[mes][cat] = linea[mes][cat];
                    totalDeducciones += facturas[mes][cat];
                    System.out.println("El costo de la factura de este mes es de: " + facturas[mes][cat]);
                }
            }
            if (totalDeducciones > 5352.97) {
                totalDeducciones = 5352.97;
            }
            totalDeducciones *= maxDeductRate;

        } catch (IOException e) {
            e.printStackTrace();
        }

        return totalDeducciones;

    }

    public static void generarDeclaracion(String nombre, double totalIngresos, double totalDeducciones, double baseImponible, double impExcedentePagar, double impExcedente, double impBasico, double impTotal, double iess, double retornoImpuestos, double refund) {
        System.out.println("Estimado/a " + nombre);
        System.out.println("Total de ingresos: " + totalIngresos);
        System.out.println("Total de deducciones: " + totalDeducciones);
        System.out.println("-------------------------------------------------");
        System.out.println("Sus ingresos netos son: " + baseImponible);
        System.out.println("*");
        System.out.println("Porcentaje que usted pagara de impuesto: " + impExcedente);
        System.out.println("-------------------------------------------------");
        System.out.println("Impuesto de Fraccion Excedente a pagar: " + impExcedentePagar);
        System.out.println("Impuesto de Fraccion Basica a pagar: " + impBasico);
        System.out.println("");
        System.out.println("Total de Impuesto a pagar: " + impTotal);
        System.out.println("-------------------------------------------------");
        System.out.println("Informacion adicional:");
        System.out.println("Aporte al IESS: " + iess);
        System.out.println("Credito tributario o devolucion (por dividendos Corporativos): " + retornoImpuestos + "$");
        System.out.println("Devolucion por Excedente de impuestos: (Ingresos netos negativos) $" + refund);
        System.out.println("-------------------------------------------------");
    }

    public static void calcularImpuesto(double baseImponible) {
        if (baseImponible > 0 && baseImponible <= 11722) {
            impBasico = 0;
            impExcedente = 0;
        } else if (baseImponible > 11722 && baseImponible <= 14930) {
            impBasico = 0;
            impExcedente = 0.05;
        } else if (baseImponible > 14930 && baseImponible <= 19385) {
            impBasico = 160;
            impExcedente = 0.1;
        } else if (baseImponible > 19385 && baseImponible <= 25638) {
            impBasico = 606;
            impExcedente = 0.12;
        } else if (baseImponible > 25638 && baseImponible <= 33738) {
            impBasico = 1356;
            impExcedente = 0.15;
        } else if (baseImponible > 33738 && baseImponible <= 44721) {
            impBasico = 2571;
            impExcedente = 0.2;
        } else if (baseImponible > 44721 && baseImponible <= 59537) {
            impBasico = 4768;
            impExcedente = 0.25;
        } else if (baseImponible > 59537 && baseImponible <= 79388) {
            impBasico = 8472;
            impExcedente = 0.3;
        } else if (baseImponible > 79388 && baseImponible <= 105580) {
            impBasico = 14427;
            impExcedente = 0.35;
        } else if (baseImponible > 105580) {
            impBasico = 23594;
            impExcedente = 0.37;
        }
        impExcedentePagar = baseImponible * impExcedente;
        impTotal = impBasico + impExcedentePagar;
    }

    public static String getTaxTable(int año) {
          BufferedReader leer2;
          String taxTable = "";
        try {
            leer2 = new BufferedReader(new FileReader("Tablas Impositivas 2023.csv"));
             List<String[]> linea = new ArrayList<>();
          
        
            String line;
            while ((line = leer2.readLine()) != null) {
                taxTable += line + "\n";
                linea.add(line.split(","));
            }

            for (String[] row : linea) {
                for (String cell : row) {
                    System.out.printf("%s\t", cell);
                }
                System.out.println();
            }

            leer2.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VentanaDeclaracion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(VentanaDeclaracion.class.getName()).log(Level.SEVERE, null, ex);
        }
       

          return taxTable;
    }

    public static void guardarReporte(String nombre, double totalIngresos, double totalDeducciones, double baseImponible, double impExcedentePagar, double impExcedente, double impBasico, double impTotal, double iess, double retornoImpuestos, double refund) {
        try {
            escribir.write("Estimado/a;" + nombre);
            escribir.newLine();
            escribir.write("Total de ingresos:;" + df.format(totalIngresos));
            escribir.newLine();
            escribir.write("Total de deducciones:;" + df.format(totalDeducciones));
            escribir.newLine();
            escribir.write("-------------------------------------------------");
            escribir.newLine();
            escribir.write("Sus ingresos netos son:;" + df.format(baseImponible));
            escribir.newLine();
            escribir.write("*");
            escribir.newLine();
            escribir.write("Porcentaje que usted pagara de impuesto:;" + df.format(impExcedente));
            escribir.newLine();
            escribir.write("-------------------------------------------------");
            escribir.newLine();
            escribir.write("Impuesto de Fraccion Excedente a pagar:;" + df.format(impExcedentePagar));
            escribir.newLine();
            escribir.write("Impuesto de Fraccion Basica a pagar:;" + df.format(impBasico));
            escribir.newLine();
            escribir.write("");
            escribir.newLine();
            escribir.write("Total de Impuesto a pagar:;" + df.format(impTotal));
            escribir.newLine();
            escribir.write("-------------------------------------------------");
            escribir.newLine();
            escribir.write("Informacion adicional:");
            escribir.newLine();
            escribir.write("Aporte al IESS:;" + df.format(iess));
            escribir.newLine();
            escribir.write("Credito tributario o devolucion (por dividendos Corporativos):;" + df.format(retornoImpuestos) + "$");
            escribir.newLine();
            escribir.write("Devolucion por Excedente de impuestos: (Ingresos netos negativos); $" + df.format(refund));
            escribir.newLine();
            escribir.write("-------------------------------------------------");
            escribir.newLine();

            escribir.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonTaxTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel nameLabel;
    private java.awt.ScrollPane scrollPane1;
    private javax.swing.JTextArea textAreaFactura;
    private java.awt.TextField textField1;
    // End of variables declaration//GEN-END:variables
}
